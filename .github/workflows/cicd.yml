name: CI-CD 

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Build jar
        run: |
          chmod +x ./gradlew || true
          ./gradlew --no-daemon clean bootJar

      - name: Set image tag
        run: echo "APP_TAG=${{ github.run_number }}-${{ github.sha }}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USER }}/${{ vars.APP_NAME }}:${{ env.APP_TAG }}
            ${{ secrets.DOCKERHUB_USER }}/${{ vars.APP_NAME }}:latest

      - name: Save tag
        run: echo "${{ env.APP_TAG }}" > tag.txt

      - uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: tag.txt

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: image-tag

      - name: Read tag
        run: echo "TAG=$(cat tag.txt)" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          : > .env
          printf "DOCKERHUB_USER=%s\n" "${{ secrets.DOCKERHUB_USER }}" >> .env
          printf "APP_NAME=%s\n"        "${{ vars.APP_NAME }}" >> .env
          printf "APP_TAG=%s\n"         "${{ env.TAG }}" >> .env
          printf "APP_PORT=%s\n"        "${{ vars.APP_PORT }}" >> .env
          printf "\n# --- Spring / DB ---\n" >> .env
          # printf "SPRING_PROFILES_ACTIVE=%s\n" "prod" >> .env   # 필요시 주석 해제
          printf "POSTGRES_URL=%s\n"     "${{ secrets.POSTGRES_URL }}" >> .env
          printf "POSTGRES_USER=%s\n"    "${{ secrets.POSTGRES_USER }}" >> .env
          printf "POSTGRES_PASSWORD=%s\n" "${{ secrets.POSTGRES_PASSWORD }}" >> .env
          printf "KAKAO_CLIENT_ID=%s\n"       "${{ secrets.KAKAO_CLIENT_ID }}" >> .env
          printf "KAKAO_REDIRECT_URL=%s\n"       "${{ secrets.KAKAO_REDIRECT_URL }}" >> .env
          printf "TOSS_CLIENT_KEY=%s\n"       "${{ secrets.TOSS_CLIENT_KEY }}" >> .env
          printf "TOSS_SECRET_KEY=%s\n"       "${{ secrets.TOSS_SECRET_KEY }}" >> .env
          printf "TOSS_SUCCESS_URL=%s\n"       "${{ secrets.TOSS_SUCCESS_URL }}" >> .env
          printf "TOSS_FAIL_URL=%s\n"       "${{ secrets.TOSS_FAIL_URL }}" >> .env
          printf "JWT_SECRET=%s\n"       "${{ secrets.JWT_SECRET }}" >> .env
        
      - name: Upload compose & env to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml, .env"
          target: /home/ubuntu/app/
          overwrite: true

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            cd /home/ubuntu/app
            docker compose config
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USER }}" --password-stdin
            docker compose pull
            docker compose up -d --remove-orphans

